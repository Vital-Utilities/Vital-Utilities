//     This code was generated by a Reinforced.Typings tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.

export enum ProcessPriorityEnum {
	DontOverride = "DontOverride",
	Idle = "Idle",
	BelowNormal = "BelowNormal",
	Normal = "Normal",
	AboveNormal = "AboveNormal",
	High = "High",
	RealTime = "RealTime"
}
export interface ClientSettings
{
	alwaysOnTop: boolean;
}
export interface AddProccessRequest
{
	processName: string;
	alias: string;
	executionPath: string;
	processPriority: ProcessPriorityEnum;
	affinity: number[];
	profileId: number;
}
export interface GetAllResponse
{
	managedModels: ManagedModelDto[];
	processesToAdd: ProcessToAddDto[];
}
export interface GetManagedResponse
{
	affinityModels: ManagedModelDto[];
}
export interface GetProcessesToAddResponse
{
	processes: ProcessToAddDto[];
}
export interface GetRunningProcessesResponse
{
	processView: { [key:number]: ParentChildModelDto };
}
export interface UpdateManagedRequest
{
	managedModelDto: ManagedModelDto;
}
export interface CreateProfileRequest
{
	name: string;
}
export interface UpdateProfileRequest
{
	profile: ProfileDto;
}
export interface ManagedModelDto
{
	id: number;
	processName: string;
	alias: string;
	processPriority: ProcessPriorityEnum;
	affinity: number[];
	parentProfileId: number;
}
export interface ProcessToAddDto
{
	pid: number;
	processName: string;
	mainWindowTitle: string;
	executionPath?: string;
	canModify: boolean;
	affinity: number[];
	processPriority: ProcessPriorityEnum;
}
export interface ProcessViewDto
{
	processName: string;
	processTitle?: string;
	description?: string;
	id: number;
}
export interface ProfileDto
{
	id: number;
	name: string;
	managedModelsIds: number[];
	enabled: boolean;
	active: boolean;
	priority?: number;
}
export interface SettingsDto
{
	runAtStarup?: boolean;
	launch: LaunchSettings;
	metrics: MetricsSettings;
	influxDb: InfluxDbSettings;
}
export interface SettingsClasses
{
}
export interface ParentChildModelDto
{
	parent: ProcessViewDto;
	children: ProcessViewDto[];
}
export interface LaunchSettings
{
	vitalServiceHttpsPort: number;
	vitalServiceHttpPort: number;
}
export interface MetricsSettings
{
	persistMetrics: boolean;
}
export interface InfluxDbSettings
{
	enabled: boolean;
	reportIntervalSeconds: number;
	endPoint: string;
	token: string;
}
export enum DriveType {
	Unknown = "Unknown",
	NoRootDirectory = "NoRootDirectory",
	Removable = "Removable",
	Fixed = "Fixed",
	Network = "Network",
	CDRom = "CDRom",
	Ram = "Ram"
}
export interface DiskUsages
{
	disks: { [key:string]: Usage };
}
export interface Usage
{
	name: string;
	serial?: string;
	uniqueIdentifier?: string;
	driveType?: DriveType;
	throughput: Throughput;
	load: Load;
	temperatures: { [key:string]: number };
	data: Data;
	label: string;
	letter: string;
}
export interface Load
{
	usedSpacePercentage?: number;
	usedSpaceBytes?: number;
	totalFreeSpaceBytes?: number;
	writeActivityPercentage?: number;
	totalActivityPercentage?: number;
}
export interface Throughput
{
	readRateBytesPerSecond?: number;
	writeRateBytesPerSecond?: number;
}
export interface Data
{
	dataReadBytes?: number;
	dataWrittenBytes?: number;
}
export interface CpuUsageMetricModel
{
	totalCoreUsagePercentage?: number;
	packageTemperature?: number;
	powerDrawWattage?: number;
	coreClocksMhz?: { [key:number]: number };
	coresUsagePercentage?: { [key:number]: number };
	id: number;
	uniqueIdentifier?: string;
}
export interface DiskUsageMetricModel
{
	serial?: string;
	name?: string;
	driveLetter?: string;
	driveType?: DriveType;
	usedSpacePercentage?: number;
	usedSpaceBytes?: number;
	writeActivityPercentage?: number;
	totalActivityPercentage?: number;
	readRateBytesPerSecond?: number;
	writeRateBytesPerSecond?: number;
	dataReadBytes?: number;
	dataWrittenBytes?: number;
	temperatures?: { [key:string]: number };
	id: number;
	uniqueIdentifier?: string;
}
export interface GpuUsageMetricModel
{
	coreUsagePercentage?: number;
	vramUsageBytes?: number;
	vramTotalBytes?: number;
	coreTemperature?: number;
	powerDrawWattage?: number;
	fanPercentage?: { [key:string]: number };
	id: number;
	uniqueIdentifier?: string;
}
export interface NetworkUsageMetricModel
{
	uploadSpeedBps?: number;
	downloadSpeedBps?: number;
	id: number;
	uniqueIdentifier?: string;
}
export interface RamUsageMetricModel
{
	usedMemoryBytes?: number;
	totalVisibleMemoryBytes?: number;
	id: number;
	uniqueIdentifier?: string;
}
export interface TimeSeriesMachineMetricsModel
{
	id: number;
	dateTimeOffset: Date;
	cpuUsageData: CpuUsageMetricModel[];
	gpuUsageData: GpuUsageMetricModel[];
	ramUsageData: RamUsageMetricModel;
	networkUsageData: NetworkUsageMetricModel[];
	diskUsageData: DiskUsageMetricModel[];
}
export interface HardwareMetricModel
{
	id: number;
	uniqueIdentifier?: string;
}
export interface GetMachineDynamicDataResponse
{
	cpuUsageData?: CpuUsages;
	ramUsagesData?: RamUsages;
	gpuUsageData?: GpuUsages[];
	diskUsages?: DiskUsages;
	networkUsageData?: NetworkAdapters;
	processCpuUsage?: { [key:number]: number };
	processCpuThreadsUsage?: { [key:number]: number };
	processThreadCount?: { [key:number]: number };
	processRamUsageGb?: { [key:number]: number };
	processDiskBytesPerSecActivity?: { [key:number]: number };
	cpuTemperature?: { [key:string]: number };
	processGpuUsage?: { [key:number]: number };
}
export interface GetMachineTimeSeriesRequest
{
	earliest: Date;
	latest: Date;
}
export interface GetMachineStaticDataResponse
{
	directXVersion?: string;
	cpu: CpuData;
	ram: RamData[];
	gpu: GpuData[];
}
export interface TimeSeriesMachineMetricsResponse
{
	requestRange: DateRange;
	metrics: TimeSeriesMachineMetricsModel[];
}
export interface DateRange
{
	earliest: Date;
	latest: Date;
}
export interface CpuUsages
{
	coreClocksMhz: number[];
	total: number;
	powerDrawWattage?: number;
	cores: number[];
	temperatureReadings: { [key:string]: number };
}
export interface GpuUsages
{
	temperatureReadings: { [key:string]: number };
	totalMemoryBytes?: number;
	memoryUsedBytes?: number;
	memoryClockMhz?: number;
	shaderClockMhz?: number;
	coreClockMhz?: number;
	fanPercentage?: { [key:string]: number };
	powerDraw?: number;
	load: LoadData;
	pcIe_Throughput: PCIE_ThroughPut;
}
export interface NetworkAdapters
{
	adapters: { [key:string]: NetworkAdapter };
}
export interface RamUsages
{
	usedMemoryBytes: number;
	totalVisibleMemoryBytes: number;
}
export interface CpuData
{
	name: string;
	numberOfEnabledCore: number;
	numberOfCores: number;
	threadCount: number;
	virtualizationFirmwareEnabled: boolean;
	l1CacheSize: number;
	l2CacheSize: number;
	l3CacheSize: number;
}
export interface GpuData
{
	name: string;
	memoryTotalBytes?: number;
}
export interface MotherBoardData
{
	name?: string;
	bios?: string;
}
export interface RamData
{
	name?: string;
	partNumber?: string;
	type?: string;
	speedMhz?: number;
	slotNumber?: number;
	slotChannel?: string;
	configuredClockSpeedMhz?: number;
	capacity?: number;
}
export interface PCIE_ThroughPut
{
	pcIe_Rx_BytesPerSecond?: number;
	pcIe_Tx_BytesPerSecond?: number;
}
export interface LoadData
{
	core?: number;
	frameBuffer?: number;
	videoEngine?: number;
	busInterface?: number;
	memory?: number;
	memoryController?: number;
	cuda?: number;
	threeD?: number;
}
export interface NetworkAdapter
{
	usage: Usage;
	properties: Properties;
}
export interface Properties
{
	ipInterfaceProperties: IPInterfaceProperties;
	name: string;
	description?: string;
	macAddress: string;
	speedBps: number;
	connectionType: string;
}
export interface IPInterfaceProperties
{
	iPv4Address?: string;
	iPv6Address?: string;
	dnsSuffix?: string;
	isDnsEnabled: boolean;
}
export interface Usage
{
	uploadSpeedBps: number;
	downloadSpeedBps: number;
	uploadedBps: number;
	downloadedBps: number;
	usagePercentage: number;
}
export interface DeleteManagedRequest
{
	processId: number;
	parentProfileId: number;
}
