/* tslint:disable */
/* eslint-disable */
/**
 * VitalService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetAllResponse,
  GetManagedResponse,
  GetProcessesToAddResponse,
  GetRunningProcessesResponse,
} from '../models';
import {
    GetAllResponseFromJSON,
    GetAllResponseToJSON,
    GetManagedResponseFromJSON,
    GetManagedResponseToJSON,
    GetProcessesToAddResponseFromJSON,
    GetProcessesToAddResponseToJSON,
    GetRunningProcessesResponseFromJSON,
    GetRunningProcessesResponseToJSON,
} from '../models';

export interface ApiProcessKillIdPostRequest {
    id: number;
}

export interface ApiProcessOpenpathIdPostRequest {
    id: number;
}

export interface ApiProcessOpenpropertiesIdPostRequest {
    id: number;
}

/**
 * 
 */
export class ProcessApi extends runtime.BaseAPI {

    /**
     */
    async apiProcessGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Process`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAllResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiProcessGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllResponse> {
        const response = await this.apiProcessGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProcessKillIdPostRaw(requestParameters: ApiProcessKillIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiProcessKillIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Process/kill/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiProcessKillIdPost(requestParameters: ApiProcessKillIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiProcessKillIdPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiProcessManagedGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetManagedResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Process/Managed`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetManagedResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiProcessManagedGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetManagedResponse> {
        const response = await this.apiProcessManagedGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProcessOpenpathIdPostRaw(requestParameters: ApiProcessOpenpathIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiProcessOpenpathIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Process/openpath/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiProcessOpenpathIdPost(requestParameters: ApiProcessOpenpathIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiProcessOpenpathIdPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiProcessOpenpropertiesIdPostRaw(requestParameters: ApiProcessOpenpropertiesIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiProcessOpenpropertiesIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Process/openproperties/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiProcessOpenpropertiesIdPost(requestParameters: ApiProcessOpenpropertiesIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiProcessOpenpropertiesIdPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiProcessProcessesToAddGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProcessesToAddResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Process/ProcessesToAdd`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProcessesToAddResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiProcessProcessesToAddGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProcessesToAddResponse> {
        const response = await this.apiProcessProcessesToAddGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProcessRunningProcessesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRunningProcessesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Process/RunningProcesses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetRunningProcessesResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiProcessRunningProcessesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRunningProcessesResponse> {
        const response = await this.apiProcessRunningProcessesGetRaw(initOverrides);
        return await response.value();
    }

}
