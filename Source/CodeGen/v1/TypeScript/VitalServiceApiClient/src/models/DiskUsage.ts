/* tslint:disable */
/* eslint-disable */
/**
 * VitalService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DiskHealth } from './DiskHealth';
import {
    DiskHealthFromJSON,
    DiskHealthFromJSONTyped,
    DiskHealthToJSON,
} from './DiskHealth';
import type { DiskLoad } from './DiskLoad';
import {
    DiskLoadFromJSON,
    DiskLoadFromJSONTyped,
    DiskLoadToJSON,
} from './DiskLoad';
import type { DiskType } from './DiskType';
import {
    DiskTypeFromJSON,
    DiskTypeFromJSONTyped,
    DiskTypeToJSON,
} from './DiskType';
import type { DriveType } from './DriveType';
import {
    DriveTypeFromJSON,
    DriveTypeFromJSONTyped,
    DriveTypeToJSON,
} from './DriveType';
import type { Throughput } from './Throughput';
import {
    ThroughputFromJSON,
    ThroughputFromJSONTyped,
    ThroughputToJSON,
} from './Throughput';

/**
 * 
 * @export
 * @interface DiskUsage
 */
export interface DiskUsage {
    /**
     * 
     * @type {string}
     * @memberof DiskUsage
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof DiskUsage
     */
    serial: string | null;
    /**
     * 
     * @type {string}
     * @memberof DiskUsage
     */
    uniqueIdentifier: string | null;
    /**
     * 
     * @type {DriveType}
     * @memberof DiskUsage
     */
    driveType: DriveType;
    /**
     * 
     * @type {DiskType}
     * @memberof DiskUsage
     */
    diskType: DiskType;
    /**
     * 
     * @type {Throughput}
     * @memberof DiskUsage
     */
    throughput: Throughput;
    /**
     * 
     * @type {DiskLoad}
     * @memberof DiskUsage
     */
    load: DiskLoad;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof DiskUsage
     */
    temperatures: { [key: string]: number; };
    /**
     * 
     * @type {DiskHealth}
     * @memberof DiskUsage
     */
    data: DiskHealth;
    /**
     * 
     * @type {string}
     * @memberof DiskUsage
     */
    label: string;
    /**
     * 
     * @type {string}
     * @memberof DiskUsage
     */
    letter: string;
}

/**
 * Check if a given object implements the DiskUsage interface.
 */
export function instanceOfDiskUsage(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "serial" in value;
    isInstance = isInstance && "uniqueIdentifier" in value;
    isInstance = isInstance && "driveType" in value;
    isInstance = isInstance && "diskType" in value;
    isInstance = isInstance && "throughput" in value;
    isInstance = isInstance && "load" in value;
    isInstance = isInstance && "temperatures" in value;
    isInstance = isInstance && "data" in value;
    isInstance = isInstance && "label" in value;
    isInstance = isInstance && "letter" in value;

    return isInstance;
}

export function DiskUsageFromJSON(json: any): DiskUsage {
    return DiskUsageFromJSONTyped(json, false);
}

export function DiskUsageFromJSONTyped(json: any, ignoreDiscriminator: boolean): DiskUsage {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'serial': json['serial'],
        'uniqueIdentifier': json['uniqueIdentifier'],
        'driveType': DriveTypeFromJSON(json['driveType']),
        'diskType': DiskTypeFromJSON(json['diskType']),
        'throughput': ThroughputFromJSON(json['throughput']),
        'load': DiskLoadFromJSON(json['load']),
        'temperatures': json['temperatures'],
        'data': DiskHealthFromJSON(json['data']),
        'label': json['label'],
        'letter': json['letter'],
    };
}

export function DiskUsageToJSON(value?: DiskUsage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'serial': value.serial,
        'uniqueIdentifier': value.uniqueIdentifier,
        'driveType': DriveTypeToJSON(value.driveType),
        'diskType': DiskTypeToJSON(value.diskType),
        'throughput': ThroughputToJSON(value.throughput),
        'load': DiskLoadToJSON(value.load),
        'temperatures': value.temperatures,
        'data': DiskHealthToJSON(value.data),
        'label': value.label,
        'letter': value.letter,
    };
}

