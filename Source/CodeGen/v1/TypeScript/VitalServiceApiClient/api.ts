/* tslint:disable */
/* eslint-disable */
/**
 * VitalService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AddProccessRequest
 */
export interface AddProccessRequest {
    /**
     * 
     * @type {string}
     * @memberof AddProccessRequest
     */
    'processName': string;
    /**
     * 
     * @type {string}
     * @memberof AddProccessRequest
     */
    'alias': string;
    /**
     * 
     * @type {string}
     * @memberof AddProccessRequest
     */
    'executionPath': string;
    /**
     * 
     * @type {ProcessPriorityEnum}
     * @memberof AddProccessRequest
     */
    'processPriority': ProcessPriorityEnum;
    /**
     * 
     * @type {Array<number>}
     * @memberof AddProccessRequest
     */
    'affinity': Array<number>;
    /**
     * 
     * @type {number}
     * @memberof AddProccessRequest
     */
    'profileId': number;
}


/**
 * 
 * @export
 * @interface ClientSettings
 */
export interface ClientSettings {
    /**
     * 
     * @type {boolean}
     * @memberof ClientSettings
     */
    'alwaysOnTop': boolean;
}
/**
 * 
 * @export
 * @interface CpuCache
 */
export interface CpuCache {
    /**
     * 
     * @type {number}
     * @memberof CpuCache
     */
    'l1Size'?: number;
    /**
     * 
     * @type {number}
     * @memberof CpuCache
     */
    'l1LineSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof CpuCache
     */
    'l2Size'?: number;
    /**
     * 
     * @type {number}
     * @memberof CpuCache
     */
    'l2LineSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof CpuCache
     */
    'l3Size'?: number;
    /**
     * 
     * @type {number}
     * @memberof CpuCache
     */
    'l3LineSize'?: number;
}
/**
 * 
 * @export
 * @interface CpuData
 */
export interface CpuData {
    /**
     * 
     * @type {string}
     * @memberof CpuData
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof CpuData
     */
    'numberOfEnabledCore': number;
    /**
     * 
     * @type {number}
     * @memberof CpuData
     */
    'numberOfCores': number;
    /**
     * 
     * @type {number}
     * @memberof CpuData
     */
    'threadCount': number;
    /**
     * 
     * @type {boolean}
     * @memberof CpuData
     */
    'virtualizationFirmwareEnabled': boolean;
    /**
     * 
     * @type {number}
     * @memberof CpuData
     */
    'l1CacheSize': number;
    /**
     * 
     * @type {number}
     * @memberof CpuData
     */
    'l2CacheSize': number;
    /**
     * 
     * @type {number}
     * @memberof CpuData
     */
    'l3CacheSize': number;
}
/**
 * 
 * @export
 * @interface CpuUsage
 */
export interface CpuUsage {
    /**
     * 
     * @type {string}
     * @memberof CpuUsage
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CpuUsage
     */
    'brand'?: string;
    /**
     * 
     * @type {string}
     * @memberof CpuUsage
     */
    'vendorId'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof CpuUsage
     */
    'coreClocksMhz': Array<number>;
    /**
     * 
     * @type {number}
     * @memberof CpuUsage
     */
    'totalCorePercentage': number;
    /**
     * 
     * @type {number}
     * @memberof CpuUsage
     */
    'powerDrawWattage'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof CpuUsage
     */
    'corePercentages': Array<number>;
    /**
     * 
     * @type {CpuCache}
     * @memberof CpuUsage
     */
    'cpuCache'?: CpuCache;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof CpuUsage
     */
    'temperatureReadings': { [key: string]: number; };
}
/**
 * 
 * @export
 * @interface CpuUsageMetricModel
 */
export interface CpuUsageMetricModel {
    /**
     * 
     * @type {number}
     * @memberof CpuUsageMetricModel
     */
    'totalCoreUsagePercentage'?: number;
    /**
     * 
     * @type {number}
     * @memberof CpuUsageMetricModel
     */
    'packageTemperature'?: number;
    /**
     * 
     * @type {number}
     * @memberof CpuUsageMetricModel
     */
    'powerDrawWattage'?: number;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof CpuUsageMetricModel
     */
    'coreClocksMhz'?: { [key: string]: number; };
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof CpuUsageMetricModel
     */
    'coresUsagePercentage'?: { [key: string]: number; };
    /**
     * 
     * @type {number}
     * @memberof CpuUsageMetricModel
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof CpuUsageMetricModel
     */
    'uniqueIdentifier'?: string;
}
/**
 * 
 * @export
 * @interface CreateProfileRequest
 */
export interface CreateProfileRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateProfileRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface DateRange
 */
export interface DateRange {
    /**
     * 
     * @type {string}
     * @memberof DateRange
     */
    'earliest': string;
    /**
     * 
     * @type {string}
     * @memberof DateRange
     */
    'latest': string;
}
/**
 * 
 * @export
 * @interface DiskHealth
 */
export interface DiskHealth {
    /**
     * 
     * @type {number}
     * @memberof DiskHealth
     */
    'totalBytesRead'?: number;
    /**
     * 
     * @type {number}
     * @memberof DiskHealth
     */
    'totalBytesWritten'?: number;
}
/**
 * 
 * @export
 * @interface DiskLoad
 */
export interface DiskLoad {
    /**
     * 
     * @type {number}
     * @memberof DiskLoad
     */
    'usedSpacePercentage'?: number;
    /**
     * 
     * @type {number}
     * @memberof DiskLoad
     */
    'usedSpaceBytes'?: number;
    /**
     * 
     * @type {number}
     * @memberof DiskLoad
     */
    'totalSpaceBytes'?: number;
    /**
     * 
     * @type {number}
     * @memberof DiskLoad
     */
    'writeActivityPercentage'?: number;
    /**
     * 
     * @type {number}
     * @memberof DiskLoad
     */
    'totalActivityPercentage'?: number;
}
/**
 * 
 * @export
 * @interface DiskThroughput
 */
export interface DiskThroughput {
    /**
     * 
     * @type {number}
     * @memberof DiskThroughput
     */
    'readRateBytesPerSecond'?: number;
    /**
     * 
     * @type {number}
     * @memberof DiskThroughput
     */
    'writeRateBytesPerSecond'?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const DiskType = {
    Unknown: 'Unknown',
    Hdd: 'HDD',
    Ssd: 'SSD'
} as const;

export type DiskType = typeof DiskType[keyof typeof DiskType];


/**
 * 
 * @export
 * @interface DiskUsage
 */
export interface DiskUsage {
    /**
     * 
     * @type {string}
     * @memberof DiskUsage
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof DiskUsage
     */
    'serial'?: string;
    /**
     * 
     * @type {string}
     * @memberof DiskUsage
     */
    'uniqueIdentifier'?: string;
    /**
     * 
     * @type {DriveType}
     * @memberof DiskUsage
     */
    'driveType': DriveType;
    /**
     * 
     * @type {DiskType}
     * @memberof DiskUsage
     */
    'diskType': DiskType;
    /**
     * 
     * @type {DiskThroughput}
     * @memberof DiskUsage
     */
    'throughput'?: DiskThroughput;
    /**
     * 
     * @type {DiskLoad}
     * @memberof DiskUsage
     */
    'load': DiskLoad;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof DiskUsage
     */
    'temperatures': { [key: string]: number; };
    /**
     * 
     * @type {DiskHealth}
     * @memberof DiskUsage
     */
    'diskHealth'?: DiskHealth;
    /**
     * 
     * @type {string}
     * @memberof DiskUsage
     */
    'volumeLabel'?: string;
    /**
     * 
     * @type {string}
     * @memberof DiskUsage
     */
    'letter'?: string;
}


/**
 * 
 * @export
 * @interface DiskUsageMetricModel
 */
export interface DiskUsageMetricModel {
    /**
     * 
     * @type {string}
     * @memberof DiskUsageMetricModel
     */
    'serial'?: string;
    /**
     * 
     * @type {string}
     * @memberof DiskUsageMetricModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DiskUsageMetricModel
     */
    'driveLetter'?: string;
    /**
     * 
     * @type {number}
     * @memberof DiskUsageMetricModel
     */
    'usedSpacePercentage'?: number;
    /**
     * 
     * @type {number}
     * @memberof DiskUsageMetricModel
     */
    'usedSpaceBytes'?: number;
    /**
     * 
     * @type {number}
     * @memberof DiskUsageMetricModel
     */
    'totalSpaceBytes'?: number;
    /**
     * 
     * @type {number}
     * @memberof DiskUsageMetricModel
     */
    'writeActivityPercentage'?: number;
    /**
     * 
     * @type {number}
     * @memberof DiskUsageMetricModel
     */
    'totalActivityPercentage'?: number;
    /**
     * 
     * @type {number}
     * @memberof DiskUsageMetricModel
     */
    'readRateBytesPerSecond'?: number;
    /**
     * 
     * @type {number}
     * @memberof DiskUsageMetricModel
     */
    'writeRateBytesPerSecond'?: number;
    /**
     * 
     * @type {number}
     * @memberof DiskUsageMetricModel
     */
    'dataReadBytes'?: number;
    /**
     * 
     * @type {number}
     * @memberof DiskUsageMetricModel
     */
    'dataWrittenBytes'?: number;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof DiskUsageMetricModel
     */
    'temperatures'?: { [key: string]: number; };
    /**
     * 
     * @type {number}
     * @memberof DiskUsageMetricModel
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof DiskUsageMetricModel
     */
    'uniqueIdentifier'?: string;
}
/**
 * 
 * @export
 * @interface DiskUsages
 */
export interface DiskUsages {
    /**
     * 
     * @type {{ [key: string]: DiskUsage; }}
     * @memberof DiskUsages
     */
    'disks': { [key: string]: DiskUsage; };
}
/**
 * 
 * @export
 * @enum {string}
 */

export const DriveType = {
    Unknown: 'Unknown',
    NoRootDirectory: 'NoRootDirectory',
    Removable: 'Removable',
    Fixed: 'Fixed',
    Network: 'Network',
    CdRom: 'CDRom',
    Ram: 'Ram'
} as const;

export type DriveType = typeof DriveType[keyof typeof DriveType];


/**
 * 
 * @export
 * @interface GetAllResponse
 */
export interface GetAllResponse {
    /**
     * 
     * @type {Array<ManagedModelDto>}
     * @memberof GetAllResponse
     */
    'managedModels': Array<ManagedModelDto>;
    /**
     * 
     * @type {Array<ProcessToAddDto>}
     * @memberof GetAllResponse
     */
    'processesToAdd': Array<ProcessToAddDto>;
}
/**
 * 
 * @export
 * @interface GetMachineDynamicDataResponse
 */
export interface GetMachineDynamicDataResponse {
    /**
     * 
     * @type {CpuUsage}
     * @memberof GetMachineDynamicDataResponse
     */
    'cpuUsageData'?: CpuUsage;
    /**
     * 
     * @type {MemoryUsage}
     * @memberof GetMachineDynamicDataResponse
     */
    'ramUsagesData'?: MemoryUsage;
    /**
     * 
     * @type {Array<GpuUsage>}
     * @memberof GetMachineDynamicDataResponse
     */
    'gpuUsageData'?: Array<GpuUsage>;
    /**
     * 
     * @type {DiskUsages}
     * @memberof GetMachineDynamicDataResponse
     */
    'diskUsages'?: DiskUsages;
    /**
     * 
     * @type {NetworkAdapterUsages}
     * @memberof GetMachineDynamicDataResponse
     */
    'networkUsageData'?: NetworkAdapterUsages;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof GetMachineDynamicDataResponse
     */
    'processCpuUsage'?: { [key: string]: number; };
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof GetMachineDynamicDataResponse
     */
    'processCpuThreadsUsage'?: { [key: string]: number; };
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof GetMachineDynamicDataResponse
     */
    'processThreadCount'?: { [key: string]: number; };
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof GetMachineDynamicDataResponse
     */
    'processRamUsageBytes'?: { [key: string]: number; };
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof GetMachineDynamicDataResponse
     */
    'processDiskBytesPerSecActivity'?: { [key: string]: number; };
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof GetMachineDynamicDataResponse
     */
    'cpuTemperature'?: { [key: string]: number; };
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof GetMachineDynamicDataResponse
     */
    'processGpuUsage'?: { [key: string]: number; };
}
/**
 * 
 * @export
 * @interface GetMachineStaticDataResponse
 */
export interface GetMachineStaticDataResponse {
    /**
     * 
     * @type {string}
     * @memberof GetMachineStaticDataResponse
     */
    'directXVersion'?: string;
    /**
     * 
     * @type {CpuData}
     * @memberof GetMachineStaticDataResponse
     */
    'cpu': CpuData;
    /**
     * 
     * @type {Array<RamData>}
     * @memberof GetMachineStaticDataResponse
     */
    'ram': Array<RamData>;
    /**
     * 
     * @type {Array<GpuData>}
     * @memberof GetMachineStaticDataResponse
     */
    'gpu': Array<GpuData>;
}
/**
 * 
 * @export
 * @interface GetMachineTimeSeriesRequest
 */
export interface GetMachineTimeSeriesRequest {
    /**
     * 
     * @type {string}
     * @memberof GetMachineTimeSeriesRequest
     */
    'earliest': string;
    /**
     * 
     * @type {string}
     * @memberof GetMachineTimeSeriesRequest
     */
    'latest': string;
}
/**
 * 
 * @export
 * @interface GetManagedResponse
 */
export interface GetManagedResponse {
    /**
     * 
     * @type {Array<ManagedModelDto>}
     * @memberof GetManagedResponse
     */
    'affinityModels': Array<ManagedModelDto>;
}
/**
 * 
 * @export
 * @interface GetProcessesToAddResponse
 */
export interface GetProcessesToAddResponse {
    /**
     * 
     * @type {Array<ProcessToAddDto>}
     * @memberof GetProcessesToAddResponse
     */
    'processes': Array<ProcessToAddDto>;
}
/**
 * 
 * @export
 * @interface GetRunningProcessesResponse
 */
export interface GetRunningProcessesResponse {
    /**
     * 
     * @type {{ [key: string]: ParentChildModelDto; }}
     * @memberof GetRunningProcessesResponse
     */
    'processView': { [key: string]: ParentChildModelDto; };
}
/**
 * 
 * @export
 * @interface GpuClockSpeeds
 */
export interface GpuClockSpeeds {
    /**
     * 
     * @type {number}
     * @memberof GpuClockSpeeds
     */
    'memoryClockMhz'?: number;
    /**
     * 
     * @type {number}
     * @memberof GpuClockSpeeds
     */
    'computeClockMhz'?: number;
    /**
     * 
     * @type {number}
     * @memberof GpuClockSpeeds
     */
    'graphicsClockMhz'?: number;
    /**
     * 
     * @type {number}
     * @memberof GpuClockSpeeds
     */
    'videoClockMhz'?: number;
}
/**
 * 
 * @export
 * @interface GpuData
 */
export interface GpuData {
    /**
     * 
     * @type {string}
     * @memberof GpuData
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof GpuData
     */
    'memoryTotalBytes'?: number;
}
/**
 * 
 * @export
 * @interface GpuUsage
 */
export interface GpuUsage {
    /**
     * 
     * @type {string}
     * @memberof GpuUsage
     */
    'name'?: string;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof GpuUsage
     */
    'temperatureReadings': { [key: string]: number; };
    /**
     * 
     * @type {number}
     * @memberof GpuUsage
     */
    'deviceIndex': number;
    /**
     * 
     * @type {string}
     * @memberof GpuUsage
     */
    'partNumber'?: string;
    /**
     * 
     * @type {number}
     * @memberof GpuUsage
     */
    'totalMemoryBytes'?: number;
    /**
     * 
     * @type {number}
     * @memberof GpuUsage
     */
    'memoryUsedBytes'?: number;
    /**
     * 
     * @type {GpuClockSpeeds}
     * @memberof GpuUsage
     */
    'clockSpeeds'?: GpuClockSpeeds;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof GpuUsage
     */
    'fanPercentage'?: { [key: string]: number; };
    /**
     * 
     * @type {number}
     * @memberof GpuUsage
     */
    'powerDrawWatt'?: number;
    /**
     * 
     * @type {LoadData}
     * @memberof GpuUsage
     */
    'load'?: LoadData;
    /**
     * 
     * @type {PCIEThroughPut}
     * @memberof GpuUsage
     */
    'pcIe'?: PCIEThroughPut;
}
/**
 * 
 * @export
 * @interface GpuUsageMetricModel
 */
export interface GpuUsageMetricModel {
    /**
     * 
     * @type {number}
     * @memberof GpuUsageMetricModel
     */
    'coreUsagePercentage'?: number;
    /**
     * 
     * @type {number}
     * @memberof GpuUsageMetricModel
     */
    'vramUsageBytes'?: number;
    /**
     * 
     * @type {number}
     * @memberof GpuUsageMetricModel
     */
    'vramTotalBytes'?: number;
    /**
     * 
     * @type {number}
     * @memberof GpuUsageMetricModel
     */
    'coreTemperature'?: number;
    /**
     * 
     * @type {number}
     * @memberof GpuUsageMetricModel
     */
    'powerDrawWattage'?: number;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof GpuUsageMetricModel
     */
    'fanPercentage'?: { [key: string]: number; };
    /**
     * 
     * @type {number}
     * @memberof GpuUsageMetricModel
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof GpuUsageMetricModel
     */
    'uniqueIdentifier'?: string;
}
/**
 * 
 * @export
 * @interface HardwareMetricModel
 */
export interface HardwareMetricModel {
    /**
     * 
     * @type {number}
     * @memberof HardwareMetricModel
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof HardwareMetricModel
     */
    'uniqueIdentifier'?: string;
}
/**
 * 
 * @export
 * @interface IPInterfaceProperties
 */
export interface IPInterfaceProperties {
    /**
     * 
     * @type {string}
     * @memberof IPInterfaceProperties
     */
    'iPv4Address'?: string;
    /**
     * 
     * @type {string}
     * @memberof IPInterfaceProperties
     */
    'iPv6Address'?: string;
    /**
     * 
     * @type {string}
     * @memberof IPInterfaceProperties
     */
    'dnsSuffix'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IPInterfaceProperties
     */
    'isDnsEnabled'?: boolean;
}
/**
 * 
 * @export
 * @interface LaunchSettings
 */
export interface LaunchSettings {
    /**
     * 
     * @type {number}
     * @memberof LaunchSettings
     */
    'vitalServiceHttpsPort': number;
    /**
     * 
     * @type {number}
     * @memberof LaunchSettings
     */
    'vitalServiceHttpPort': number;
}
/**
 * 
 * @export
 * @interface LoadData
 */
export interface LoadData {
    /**
     * 
     * @type {number}
     * @memberof LoadData
     */
    'corePercentage'?: number;
    /**
     * 
     * @type {number}
     * @memberof LoadData
     */
    'frameBufferPercentage'?: number;
    /**
     * 
     * @type {number}
     * @memberof LoadData
     */
    'videoEnginePercentage'?: number;
    /**
     * 
     * @type {number}
     * @memberof LoadData
     */
    'busInterfacePercentage'?: number;
    /**
     * 
     * @type {number}
     * @memberof LoadData
     */
    'memoryUsedPercentage'?: number;
    /**
     * 
     * @type {number}
     * @memberof LoadData
     */
    'memoryControllerPercentage'?: number;
    /**
     * 
     * @type {number}
     * @memberof LoadData
     */
    'cudaPercentage'?: number;
    /**
     * 
     * @type {number}
     * @memberof LoadData
     */
    'threeDPercentage'?: number;
}
/**
 * 
 * @export
 * @interface ManagedModelDto
 */
export interface ManagedModelDto {
    /**
     * 
     * @type {number}
     * @memberof ManagedModelDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ManagedModelDto
     */
    'processName': string;
    /**
     * 
     * @type {string}
     * @memberof ManagedModelDto
     */
    'alias': string;
    /**
     * 
     * @type {ProcessPriorityEnum}
     * @memberof ManagedModelDto
     */
    'processPriority': ProcessPriorityEnum;
    /**
     * 
     * @type {Array<number>}
     * @memberof ManagedModelDto
     */
    'affinity': Array<number>;
    /**
     * 
     * @type {number}
     * @memberof ManagedModelDto
     */
    'parentProfileId': number;
}


/**
 * 
 * @export
 * @interface MemoryUsage
 */
export interface MemoryUsage {
    /**
     * 
     * @type {number}
     * @memberof MemoryUsage
     */
    'usedMemoryBytes': number;
    /**
     * 
     * @type {number}
     * @memberof MemoryUsage
     */
    'totalVisibleMemoryBytes': number;
    /**
     * 
     * @type {number}
     * @memberof MemoryUsage
     */
    'swapPercentage': number;
    /**
     * 
     * @type {number}
     * @memberof MemoryUsage
     */
    'swapUsedBytes': number;
    /**
     * 
     * @type {number}
     * @memberof MemoryUsage
     */
    'swapTotalBytes': number;
}
/**
 * 
 * @export
 * @interface MetricsSettings
 */
export interface MetricsSettings {
    /**
     * 
     * @type {boolean}
     * @memberof MetricsSettings
     */
    'persistMetrics': boolean;
}
/**
 * 
 * @export
 * @interface NetAdapterUsage
 */
export interface NetAdapterUsage {
    /**
     * 
     * @type {number}
     * @memberof NetAdapterUsage
     */
    'sendBps': number;
    /**
     * 
     * @type {number}
     * @memberof NetAdapterUsage
     */
    'recieveBps': number;
    /**
     * 
     * @type {number}
     * @memberof NetAdapterUsage
     */
    'usagePercentage'?: number;
}
/**
 * 
 * @export
 * @interface NetworkAdapterProperties
 */
export interface NetworkAdapterProperties {
    /**
     * 
     * @type {IPInterfaceProperties}
     * @memberof NetworkAdapterProperties
     */
    'ipInterfaceProperties'?: IPInterfaceProperties;
    /**
     * 
     * @type {boolean}
     * @memberof NetworkAdapterProperties
     */
    'isUp': boolean;
    /**
     * 
     * @type {string}
     * @memberof NetworkAdapterProperties
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof NetworkAdapterProperties
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof NetworkAdapterProperties
     */
    'macAddress'?: string;
    /**
     * 
     * @type {number}
     * @memberof NetworkAdapterProperties
     */
    'speedBps'?: number;
    /**
     * 
     * @type {string}
     * @memberof NetworkAdapterProperties
     */
    'connectionType'?: string;
}
/**
 * 
 * @export
 * @interface NetworkAdapterUsage
 */
export interface NetworkAdapterUsage {
    /**
     * 
     * @type {NetAdapterUsage}
     * @memberof NetworkAdapterUsage
     */
    'usage'?: NetAdapterUsage;
    /**
     * 
     * @type {NetworkAdapterProperties}
     * @memberof NetworkAdapterUsage
     */
    'properties': NetworkAdapterProperties;
}
/**
 * 
 * @export
 * @interface NetworkAdapterUsages
 */
export interface NetworkAdapterUsages {
    /**
     * 
     * @type {{ [key: string]: NetworkAdapterUsage; }}
     * @memberof NetworkAdapterUsages
     */
    'adapters': { [key: string]: NetworkAdapterUsage; };
}
/**
 * 
 * @export
 * @interface NetworkUsageMetricModel
 */
export interface NetworkUsageMetricModel {
    /**
     * 
     * @type {number}
     * @memberof NetworkUsageMetricModel
     */
    'uploadSpeedBps'?: number;
    /**
     * 
     * @type {number}
     * @memberof NetworkUsageMetricModel
     */
    'downloadSpeedBps'?: number;
    /**
     * 
     * @type {number}
     * @memberof NetworkUsageMetricModel
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof NetworkUsageMetricModel
     */
    'uniqueIdentifier'?: string;
}
/**
 * 
 * @export
 * @interface PCIEThroughPut
 */
export interface PCIEThroughPut {
    /**
     * 
     * @type {number}
     * @memberof PCIEThroughPut
     */
    'pcIe_RxBytesPerSecond'?: number;
    /**
     * 
     * @type {number}
     * @memberof PCIEThroughPut
     */
    'pcIe_TxBytesPerSecond'?: number;
}
/**
 * 
 * @export
 * @interface ParentChildModelDto
 */
export interface ParentChildModelDto {
    /**
     * 
     * @type {ProcessViewDto}
     * @memberof ParentChildModelDto
     */
    'parent': ProcessViewDto;
    /**
     * 
     * @type {{ [key: string]: ProcessViewDto; }}
     * @memberof ParentChildModelDto
     */
    'children': { [key: string]: ProcessViewDto; };
}
/**
 * 
 * @export
 * @interface ProcessData
 */
export interface ProcessData {
    /**
     * 
     * @type {number}
     * @memberof ProcessData
     */
    'pid': number;
    /**
     * 
     * @type {number}
     * @memberof ProcessData
     */
    'parentPid'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProcessData
     */
    'executablePath'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessData
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessData
     */
    'mainWindowTitle'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessData
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ProcessData
     */
    'timeStamp': string;
    /**
     * 
     * @type {number}
     * @memberof ProcessData
     */
    'cpuPercentage': number;
    /**
     * 
     * @type {number}
     * @memberof ProcessData
     */
    'memoryBytes': number;
    /**
     * 
     * @type {ProcessDiskUsage}
     * @memberof ProcessData
     */
    'diskUsage': ProcessDiskUsage;
    /**
     * 
     * @type {string}
     * @memberof ProcessData
     */
    'status'?: string;
    /**
     * 
     * @type {ProcessGpuUtil}
     * @memberof ProcessData
     */
    'gpuUtil'?: ProcessGpuUtil;
}
/**
 * 
 * @export
 * @interface ProcessDiskUsage
 */
export interface ProcessDiskUsage {
    /**
     * 
     * @type {number}
     * @memberof ProcessDiskUsage
     */
    'readBytesPerSecond': number;
    /**
     * 
     * @type {number}
     * @memberof ProcessDiskUsage
     */
    'writeBytesPerSecond': number;
}
/**
 * 
 * @export
 * @interface ProcessGpuUtil
 */
export interface ProcessGpuUtil {
    /**
     * 
     * @type {number}
     * @memberof ProcessGpuUtil
     */
    'gpuCorePercentage'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProcessGpuUtil
     */
    'gpuMemPercentage'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProcessGpuUtil
     */
    'gpuEncodingPercentage'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProcessGpuUtil
     */
    'gpuDecodingPercentage'?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ProcessPriorityEnum = {
    DontOverride: 'DontOverride',
    Idle: 'Idle',
    BelowNormal: 'BelowNormal',
    Normal: 'Normal',
    AboveNormal: 'AboveNormal',
    High: 'High',
    RealTime: 'RealTime'
} as const;

export type ProcessPriorityEnum = typeof ProcessPriorityEnum[keyof typeof ProcessPriorityEnum];


/**
 * 
 * @export
 * @interface ProcessToAddDto
 */
export interface ProcessToAddDto {
    /**
     * 
     * @type {number}
     * @memberof ProcessToAddDto
     */
    'pid': number;
    /**
     * 
     * @type {string}
     * @memberof ProcessToAddDto
     */
    'processName': string;
    /**
     * 
     * @type {string}
     * @memberof ProcessToAddDto
     */
    'mainWindowTitle': string;
    /**
     * 
     * @type {string}
     * @memberof ProcessToAddDto
     */
    'executionPath'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProcessToAddDto
     */
    'canModify': boolean;
    /**
     * 
     * @type {Array<number>}
     * @memberof ProcessToAddDto
     */
    'affinity': Array<number>;
    /**
     * 
     * @type {ProcessPriorityEnum}
     * @memberof ProcessToAddDto
     */
    'processPriority': ProcessPriorityEnum;
}


/**
 * 
 * @export
 * @interface ProcessViewDto
 */
export interface ProcessViewDto {
    /**
     * 
     * @type {string}
     * @memberof ProcessViewDto
     */
    'processName': string;
    /**
     * 
     * @type {string}
     * @memberof ProcessViewDto
     */
    'processTitle'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessViewDto
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProcessViewDto
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface ProfileDto
 */
export interface ProfileDto {
    /**
     * 
     * @type {number}
     * @memberof ProfileDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    'name': string;
    /**
     * 
     * @type {Array<number>}
     * @memberof ProfileDto
     */
    'managedModelsIds': Array<number>;
    /**
     * 
     * @type {boolean}
     * @memberof ProfileDto
     */
    'enabled': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProfileDto
     */
    'active': boolean;
    /**
     * 
     * @type {number}
     * @memberof ProfileDto
     */
    'priority'?: number;
}
/**
 * 
 * @export
 * @interface RamData
 */
export interface RamData {
    /**
     * 
     * @type {string}
     * @memberof RamData
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RamData
     */
    'partNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof RamData
     */
    'type'?: string;
    /**
     * 
     * @type {number}
     * @memberof RamData
     */
    'speedMhz'?: number;
    /**
     * 
     * @type {number}
     * @memberof RamData
     */
    'slotNumber'?: number;
    /**
     * 
     * @type {string}
     * @memberof RamData
     */
    'slotChannel'?: string;
    /**
     * 
     * @type {number}
     * @memberof RamData
     */
    'configuredClockSpeedMhz'?: number;
    /**
     * 
     * @type {number}
     * @memberof RamData
     */
    'capacity'?: number;
}
/**
 * 
 * @export
 * @interface RamUsageMetricModel
 */
export interface RamUsageMetricModel {
    /**
     * 
     * @type {number}
     * @memberof RamUsageMetricModel
     */
    'usedMemoryBytes'?: number;
    /**
     * 
     * @type {number}
     * @memberof RamUsageMetricModel
     */
    'totalVisibleMemoryBytes'?: number;
    /**
     * 
     * @type {number}
     * @memberof RamUsageMetricModel
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof RamUsageMetricModel
     */
    'uniqueIdentifier'?: string;
}
/**
 * 
 * @export
 * @interface SendUtilizationRequest
 */
export interface SendUtilizationRequest {
    /**
     * 
     * @type {Array<ProcessData>}
     * @memberof SendUtilizationRequest
     */
    'processData': Array<ProcessData>;
    /**
     * 
     * @type {SystemUsage}
     * @memberof SendUtilizationRequest
     */
    'systemUsage': SystemUsage;
}
/**
 * 
 * @export
 * @interface SettingsDto
 */
export interface SettingsDto {
    /**
     * 
     * @type {boolean}
     * @memberof SettingsDto
     */
    'runAtStarup'?: boolean;
    /**
     * 
     * @type {LaunchSettings}
     * @memberof SettingsDto
     */
    'launch': LaunchSettings;
    /**
     * 
     * @type {MetricsSettings}
     * @memberof SettingsDto
     */
    'metrics': MetricsSettings;
}
/**
 * 
 * @export
 * @interface SystemUsage
 */
export interface SystemUsage {
    /**
     * 
     * @type {CpuUsage}
     * @memberof SystemUsage
     */
    'cpuUsage': CpuUsage;
    /**
     * 
     * @type {MemoryUsage}
     * @memberof SystemUsage
     */
    'memUsage': MemoryUsage;
    /**
     * 
     * @type {Array<GpuUsage>}
     * @memberof SystemUsage
     */
    'gpuUsage': Array<GpuUsage>;
    /**
     * 
     * @type {Array<NetworkAdapterUsage>}
     * @memberof SystemUsage
     */
    'networkAdapterUsage': Array<NetworkAdapterUsage>;
    /**
     * 
     * @type {{ [key: string]: DiskUsage; }}
     * @memberof SystemUsage
     */
    'diskUsage': { [key: string]: DiskUsage; };
}
/**
 * 
 * @export
 * @interface TimeSeriesMachineMetricsModel
 */
export interface TimeSeriesMachineMetricsModel {
    /**
     * 
     * @type {number}
     * @memberof TimeSeriesMachineMetricsModel
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof TimeSeriesMachineMetricsModel
     */
    'dateTimeOffset': string;
    /**
     * 
     * @type {Array<CpuUsageMetricModel>}
     * @memberof TimeSeriesMachineMetricsModel
     */
    'cpuUsageData': Array<CpuUsageMetricModel>;
    /**
     * 
     * @type {Array<GpuUsageMetricModel>}
     * @memberof TimeSeriesMachineMetricsModel
     */
    'gpuUsageData': Array<GpuUsageMetricModel>;
    /**
     * 
     * @type {RamUsageMetricModel}
     * @memberof TimeSeriesMachineMetricsModel
     */
    'ramUsageData': RamUsageMetricModel;
    /**
     * 
     * @type {Array<NetworkUsageMetricModel>}
     * @memberof TimeSeriesMachineMetricsModel
     */
    'networkUsageData': Array<NetworkUsageMetricModel>;
    /**
     * 
     * @type {Array<DiskUsageMetricModel>}
     * @memberof TimeSeriesMachineMetricsModel
     */
    'diskUsageData': Array<DiskUsageMetricModel>;
}
/**
 * 
 * @export
 * @interface TimeSeriesMachineMetricsResponse
 */
export interface TimeSeriesMachineMetricsResponse {
    /**
     * 
     * @type {DateRange}
     * @memberof TimeSeriesMachineMetricsResponse
     */
    'requestRange': DateRange;
    /**
     * 
     * @type {Array<TimeSeriesMachineMetricsModel>}
     * @memberof TimeSeriesMachineMetricsResponse
     */
    'metrics': Array<TimeSeriesMachineMetricsModel>;
}
/**
 * 
 * @export
 * @interface UpdateManagedRequest
 */
export interface UpdateManagedRequest {
    /**
     * 
     * @type {ManagedModelDto}
     * @memberof UpdateManagedRequest
     */
    'managedModelDto': ManagedModelDto;
}
/**
 * 
 * @export
 * @interface UpdateProfileRequest
 */
export interface UpdateProfileRequest {
    /**
     * 
     * @type {ProfileDto}
     * @memberof UpdateProfileRequest
     */
    'profile': ProfileDto;
}

/**
 * HelloApi - axios parameter creator
 * @export
 */
export const HelloApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHelloGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Hello`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HelloApi - functional programming interface
 * @export
 */
export const HelloApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HelloApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiHelloGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiHelloGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HelloApi - factory interface
 * @export
 */
export const HelloApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HelloApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHelloGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiHelloGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HelloApi - object-oriented interface
 * @export
 * @class HelloApi
 * @extends {BaseAPI}
 */
export class HelloApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelloApi
     */
    public apiHelloGet(options?: AxiosRequestConfig) {
        return HelloApiFp(this.configuration).apiHelloGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * IngestApi - axios parameter creator
 * @export
 */
export const IngestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SendUtilizationRequest} [sendUtilizationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIngestUtilizationPost: async (sendUtilizationRequest?: SendUtilizationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Ingest/Utilization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendUtilizationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IngestApi - functional programming interface
 * @export
 */
export const IngestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IngestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {SendUtilizationRequest} [sendUtilizationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIngestUtilizationPost(sendUtilizationRequest?: SendUtilizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIngestUtilizationPost(sendUtilizationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IngestApi - factory interface
 * @export
 */
export const IngestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IngestApiFp(configuration)
    return {
        /**
         * 
         * @param {SendUtilizationRequest} [sendUtilizationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIngestUtilizationPost(sendUtilizationRequest?: SendUtilizationRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiIngestUtilizationPost(sendUtilizationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IngestApi - object-oriented interface
 * @export
 * @class IngestApi
 * @extends {BaseAPI}
 */
export class IngestApi extends BaseAPI {
    /**
     * 
     * @param {SendUtilizationRequest} [sendUtilizationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngestApi
     */
    public apiIngestUtilizationPost(sendUtilizationRequest?: SendUtilizationRequest, options?: AxiosRequestConfig) {
        return IngestApiFp(this.configuration).apiIngestUtilizationPost(sendUtilizationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProcessApi - axios parameter creator
 * @export
 */
export const ProcessApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProcessGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Process`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProcessKillIdPost: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiProcessKillIdPost', 'id', id)
            const localVarPath = `/api/Process/kill/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProcessManagedGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Process/Managed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProcessOpenpathIdPost: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiProcessOpenpathIdPost', 'id', id)
            const localVarPath = `/api/Process/openpath/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProcessOpenpropertiesIdPost: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiProcessOpenpropertiesIdPost', 'id', id)
            const localVarPath = `/api/Process/openproperties/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProcessProcessesToAddGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Process/ProcessesToAdd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProcessRunningProcessesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Process/RunningProcesses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProcessApi - functional programming interface
 * @export
 */
export const ProcessApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProcessApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProcessGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProcessGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProcessKillIdPost(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProcessKillIdPost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProcessManagedGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetManagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProcessManagedGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProcessOpenpathIdPost(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProcessOpenpathIdPost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProcessOpenpropertiesIdPost(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProcessOpenpropertiesIdPost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProcessProcessesToAddGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProcessesToAddResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProcessProcessesToAddGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProcessRunningProcessesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRunningProcessesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProcessRunningProcessesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProcessApi - factory interface
 * @export
 */
export const ProcessApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProcessApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProcessGet(options?: any): AxiosPromise<GetAllResponse> {
            return localVarFp.apiProcessGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProcessKillIdPost(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiProcessKillIdPost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProcessManagedGet(options?: any): AxiosPromise<GetManagedResponse> {
            return localVarFp.apiProcessManagedGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProcessOpenpathIdPost(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiProcessOpenpathIdPost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProcessOpenpropertiesIdPost(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiProcessOpenpropertiesIdPost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProcessProcessesToAddGet(options?: any): AxiosPromise<GetProcessesToAddResponse> {
            return localVarFp.apiProcessProcessesToAddGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProcessRunningProcessesGet(options?: any): AxiosPromise<GetRunningProcessesResponse> {
            return localVarFp.apiProcessRunningProcessesGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProcessApi - object-oriented interface
 * @export
 * @class ProcessApi
 * @extends {BaseAPI}
 */
export class ProcessApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessApi
     */
    public apiProcessGet(options?: AxiosRequestConfig) {
        return ProcessApiFp(this.configuration).apiProcessGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessApi
     */
    public apiProcessKillIdPost(id: number, options?: AxiosRequestConfig) {
        return ProcessApiFp(this.configuration).apiProcessKillIdPost(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessApi
     */
    public apiProcessManagedGet(options?: AxiosRequestConfig) {
        return ProcessApiFp(this.configuration).apiProcessManagedGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessApi
     */
    public apiProcessOpenpathIdPost(id: number, options?: AxiosRequestConfig) {
        return ProcessApiFp(this.configuration).apiProcessOpenpathIdPost(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessApi
     */
    public apiProcessOpenpropertiesIdPost(id: number, options?: AxiosRequestConfig) {
        return ProcessApiFp(this.configuration).apiProcessOpenpropertiesIdPost(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessApi
     */
    public apiProcessProcessesToAddGet(options?: AxiosRequestConfig) {
        return ProcessApiFp(this.configuration).apiProcessProcessesToAddGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessApi
     */
    public apiProcessRunningProcessesGet(options?: AxiosRequestConfig) {
        return ProcessApiFp(this.configuration).apiProcessRunningProcessesGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProfileApi - axios parameter creator
 * @export
 */
export const ProfileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddProccessRequest} [addProccessRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfileAddProcessConfigPut: async (addProccessRequest?: AddProccessRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Profile/AddProcessConfig`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addProccessRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateProfileRequest} [createProfileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfileCreatePut: async (createProfileRequest?: CreateProfileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Profile/Create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProfileRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfileDeleteProcessConfigIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiProfileDeleteProcessConfigIdDelete', 'id', id)
            const localVarPath = `/api/Profile/DeleteProcessConfig/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfileGetAllGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Profile/GetAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfileIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiProfileIdDelete', 'id', id)
            const localVarPath = `/api/Profile/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfileIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiProfileIdGet', 'id', id)
            const localVarPath = `/api/Profile/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateManagedRequest} [updateManagedRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfileUpdateProcessConfigPut: async (updateManagedRequest?: UpdateManagedRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Profile/UpdateProcessConfig`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateManagedRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateProfileRequest} [updateProfileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfileUpdatePut: async (updateProfileRequest?: UpdateProfileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Profile/Update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProfileRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileApi - functional programming interface
 * @export
 */
export const ProfileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AddProccessRequest} [addProccessRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProfileAddProcessConfigPut(addProccessRequest?: AddProccessRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProfileAddProcessConfigPut(addProccessRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateProfileRequest} [createProfileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProfileCreatePut(createProfileRequest?: CreateProfileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProfileCreatePut(createProfileRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProfileDeleteProcessConfigIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProfileDeleteProcessConfigIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProfileGetAllGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProfileDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProfileGetAllGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProfileIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProfileIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProfileIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProfileIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateManagedRequest} [updateManagedRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProfileUpdateProcessConfigPut(updateManagedRequest?: UpdateManagedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProfileUpdateProcessConfigPut(updateManagedRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateProfileRequest} [updateProfileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProfileUpdatePut(updateProfileRequest?: UpdateProfileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProfileUpdatePut(updateProfileRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProfileApi - factory interface
 * @export
 */
export const ProfileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileApiFp(configuration)
    return {
        /**
         * 
         * @param {AddProccessRequest} [addProccessRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfileAddProcessConfigPut(addProccessRequest?: AddProccessRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiProfileAddProcessConfigPut(addProccessRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateProfileRequest} [createProfileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfileCreatePut(createProfileRequest?: CreateProfileRequest, options?: any): AxiosPromise<ProfileDto> {
            return localVarFp.apiProfileCreatePut(createProfileRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfileDeleteProcessConfigIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiProfileDeleteProcessConfigIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfileGetAllGet(options?: any): AxiosPromise<Array<ProfileDto>> {
            return localVarFp.apiProfileGetAllGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfileIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiProfileIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfileIdGet(id: number, options?: any): AxiosPromise<ProfileDto> {
            return localVarFp.apiProfileIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateManagedRequest} [updateManagedRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfileUpdateProcessConfigPut(updateManagedRequest?: UpdateManagedRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiProfileUpdateProcessConfigPut(updateManagedRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateProfileRequest} [updateProfileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfileUpdatePut(updateProfileRequest?: UpdateProfileRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiProfileUpdatePut(updateProfileRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProfileApi - object-oriented interface
 * @export
 * @class ProfileApi
 * @extends {BaseAPI}
 */
export class ProfileApi extends BaseAPI {
    /**
     * 
     * @param {AddProccessRequest} [addProccessRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public apiProfileAddProcessConfigPut(addProccessRequest?: AddProccessRequest, options?: AxiosRequestConfig) {
        return ProfileApiFp(this.configuration).apiProfileAddProcessConfigPut(addProccessRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateProfileRequest} [createProfileRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public apiProfileCreatePut(createProfileRequest?: CreateProfileRequest, options?: AxiosRequestConfig) {
        return ProfileApiFp(this.configuration).apiProfileCreatePut(createProfileRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public apiProfileDeleteProcessConfigIdDelete(id: number, options?: AxiosRequestConfig) {
        return ProfileApiFp(this.configuration).apiProfileDeleteProcessConfigIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public apiProfileGetAllGet(options?: AxiosRequestConfig) {
        return ProfileApiFp(this.configuration).apiProfileGetAllGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public apiProfileIdDelete(id: number, options?: AxiosRequestConfig) {
        return ProfileApiFp(this.configuration).apiProfileIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public apiProfileIdGet(id: number, options?: AxiosRequestConfig) {
        return ProfileApiFp(this.configuration).apiProfileIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateManagedRequest} [updateManagedRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public apiProfileUpdateProcessConfigPut(updateManagedRequest?: UpdateManagedRequest, options?: AxiosRequestConfig) {
        return ProfileApiFp(this.configuration).apiProfileUpdateProcessConfigPut(updateManagedRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateProfileRequest} [updateProfileRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public apiProfileUpdatePut(updateProfileRequest?: UpdateProfileRequest, options?: AxiosRequestConfig) {
        return ProfileApiFp(this.configuration).apiProfileUpdatePut(updateProfileRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SettingsApi - axios parameter creator
 * @export
 */
export const SettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        apiSettingsDontUseGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Settings/DontUse`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSettingsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} [runAtStartup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSettingsSetRunAtStartupPut: async (runAtStartup?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Settings/SetRunAtStartup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (runAtStartup !== undefined) {
                localVarQueryParameter['runAtStartup'] = runAtStartup;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SettingsApi - functional programming interface
 * @export
 */
export const SettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async apiSettingsDontUseGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSettingsDontUseGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSettingsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSettingsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {boolean} [runAtStartup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSettingsSetRunAtStartupPut(runAtStartup?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSettingsSetRunAtStartupPut(runAtStartup, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SettingsApi - factory interface
 * @export
 */
export const SettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SettingsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        apiSettingsDontUseGet(options?: any): AxiosPromise<ClientSettings> {
            return localVarFp.apiSettingsDontUseGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSettingsGet(options?: any): AxiosPromise<SettingsDto> {
            return localVarFp.apiSettingsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {boolean} [runAtStartup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSettingsSetRunAtStartupPut(runAtStartup?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.apiSettingsSetRunAtStartupPut(runAtStartup, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SettingsApi - object-oriented interface
 * @export
 * @class SettingsApi
 * @extends {BaseAPI}
 */
export class SettingsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public apiSettingsDontUseGet(options?: AxiosRequestConfig) {
        return SettingsApiFp(this.configuration).apiSettingsDontUseGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public apiSettingsGet(options?: AxiosRequestConfig) {
        return SettingsApiFp(this.configuration).apiSettingsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {boolean} [runAtStartup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public apiSettingsSetRunAtStartupPut(runAtStartup?: boolean, options?: AxiosRequestConfig) {
        return SettingsApiFp(this.configuration).apiSettingsSetRunAtStartupPut(runAtStartup, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemApi - axios parameter creator
 * @export
 */
export const SystemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSystemDynamicGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/System/dynamic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSystemStaticGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/System/static`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetMachineTimeSeriesRequest} [getMachineTimeSeriesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSystemTimeseriesPost: async (getMachineTimeSeriesRequest?: GetMachineTimeSeriesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/System/timeseries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getMachineTimeSeriesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemApi - functional programming interface
 * @export
 */
export const SystemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSystemDynamicGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMachineDynamicDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSystemDynamicGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSystemStaticGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMachineStaticDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSystemStaticGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GetMachineTimeSeriesRequest} [getMachineTimeSeriesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSystemTimeseriesPost(getMachineTimeSeriesRequest?: GetMachineTimeSeriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeSeriesMachineMetricsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSystemTimeseriesPost(getMachineTimeSeriesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SystemApi - factory interface
 * @export
 */
export const SystemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSystemDynamicGet(options?: any): AxiosPromise<GetMachineDynamicDataResponse> {
            return localVarFp.apiSystemDynamicGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSystemStaticGet(options?: any): AxiosPromise<GetMachineStaticDataResponse> {
            return localVarFp.apiSystemStaticGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GetMachineTimeSeriesRequest} [getMachineTimeSeriesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSystemTimeseriesPost(getMachineTimeSeriesRequest?: GetMachineTimeSeriesRequest, options?: any): AxiosPromise<TimeSeriesMachineMetricsResponse> {
            return localVarFp.apiSystemTimeseriesPost(getMachineTimeSeriesRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
export class SystemApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public apiSystemDynamicGet(options?: AxiosRequestConfig) {
        return SystemApiFp(this.configuration).apiSystemDynamicGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public apiSystemStaticGet(options?: AxiosRequestConfig) {
        return SystemApiFp(this.configuration).apiSystemStaticGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GetMachineTimeSeriesRequest} [getMachineTimeSeriesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public apiSystemTimeseriesPost(getMachineTimeSeriesRequest?: GetMachineTimeSeriesRequest, options?: AxiosRequestConfig) {
        return SystemApiFp(this.configuration).apiSystemTimeseriesPost(getMachineTimeSeriesRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



