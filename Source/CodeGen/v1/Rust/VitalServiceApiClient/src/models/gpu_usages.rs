/*
 * VitalService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GpuUsages {
    #[serde(rename = "name")]
    pub name: Option<String>,
    #[serde(rename = "temperatureReadings")]
    pub temperature_readings: ::std::collections::HashMap<String, f32>,
    #[serde(rename = "totalMemoryBytes")]
    pub total_memory_bytes: Option<f32>,
    #[serde(rename = "memoryUsedBytes")]
    pub memory_used_bytes: Option<f32>,
    #[serde(rename = "memoryClockMhz")]
    pub memory_clock_mhz: Option<f32>,
    #[serde(rename = "shaderClockMhz")]
    pub shader_clock_mhz: Option<f32>,
    #[serde(rename = "coreClockMhz")]
    pub core_clock_mhz: Option<f32>,
    #[serde(rename = "fanPercentage")]
    pub fan_percentage: Option<::std::collections::HashMap<String, f32>>,
    #[serde(rename = "powerDraw")]
    pub power_draw: Option<f32>,
    #[serde(rename = "load")]
    pub load: Box<crate::models::LoadData>,
    #[serde(rename = "pcIe", skip_serializing_if = "Option::is_none")]
    pub pc_ie: Option<Box<crate::models::PcieThroughPut>>,
}

impl GpuUsages {
    pub fn new(name: Option<String>, temperature_readings: ::std::collections::HashMap<String, f32>, total_memory_bytes: Option<f32>, memory_used_bytes: Option<f32>, memory_clock_mhz: Option<f32>, shader_clock_mhz: Option<f32>, core_clock_mhz: Option<f32>, fan_percentage: Option<::std::collections::HashMap<String, f32>>, power_draw: Option<f32>, load: crate::models::LoadData) -> GpuUsages {
        GpuUsages {
            name,
            temperature_readings,
            total_memory_bytes,
            memory_used_bytes,
            memory_clock_mhz,
            shader_clock_mhz,
            core_clock_mhz,
            fan_percentage,
            power_draw,
            load: Box::new(load),
            pc_ie: None,
        }
    }
}


