/*
 * VitalService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DiskUsageMetricModel {
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "uniqueIdentifier")]
    pub unique_identifier: Option<String>,
    #[serde(rename = "serial")]
    pub serial: Option<String>,
    #[serde(rename = "name")]
    pub name: Option<String>,
    #[serde(rename = "driveLetter")]
    pub drive_letter: Option<String>,
    #[serde(rename = "driveType")]
    pub drive_type: crate::models::DriveType,
    #[serde(rename = "usedSpacePercentage")]
    pub used_space_percentage: Option<f32>,
    #[serde(rename = "usedSpaceBytes")]
    pub used_space_bytes: Option<i64>,
    #[serde(rename = "writeActivityPercentage")]
    pub write_activity_percentage: Option<f32>,
    #[serde(rename = "totalActivityPercentage")]
    pub total_activity_percentage: Option<f32>,
    #[serde(rename = "readRateBytesPerSecond")]
    pub read_rate_bytes_per_second: Option<f64>,
    #[serde(rename = "writeRateBytesPerSecond")]
    pub write_rate_bytes_per_second: Option<f64>,
    #[serde(rename = "dataReadBytes")]
    pub data_read_bytes: Option<f64>,
    #[serde(rename = "dataWrittenBytes")]
    pub data_written_bytes: Option<f64>,
    #[serde(rename = "temperatures")]
    pub temperatures: Option<::std::collections::HashMap<String, f32>>,
}

impl DiskUsageMetricModel {
    pub fn new(id: i32, unique_identifier: Option<String>, serial: Option<String>, name: Option<String>, drive_letter: Option<String>, drive_type: crate::models::DriveType, used_space_percentage: Option<f32>, used_space_bytes: Option<i64>, write_activity_percentage: Option<f32>, total_activity_percentage: Option<f32>, read_rate_bytes_per_second: Option<f64>, write_rate_bytes_per_second: Option<f64>, data_read_bytes: Option<f64>, data_written_bytes: Option<f64>, temperatures: Option<::std::collections::HashMap<String, f32>>) -> DiskUsageMetricModel {
        DiskUsageMetricModel {
            id,
            unique_identifier,
            serial,
            name,
            drive_letter,
            drive_type,
            used_space_percentage,
            used_space_bytes,
            write_activity_percentage,
            total_activity_percentage,
            read_rate_bytes_per_second,
            write_rate_bytes_per_second,
            data_read_bytes,
            data_written_bytes,
            temperatures,
        }
    }
}


