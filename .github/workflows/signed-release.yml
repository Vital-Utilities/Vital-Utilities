# This is a basic workflow that is manually triggered

name: Publish and Sign - Draft Release

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'version'
        required: true
        default: ""
env:
  CARGO_TERM_COLOR: always
  SENTRYIO_BACKEND_DSN: ${{ secrets.SENTRYIO_BACKEND_DSN }}
  SENTRYIO_REACT_DSN: ${{ secrets.SENTRYIO_REACT_DSN }}
  SENTRYIO_RUST_DSN: ${{ secrets.SENTRYIO_RUST_DSN }}
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
#  ensure-codegen:
#    uses: ./.github/workflows/ensure_code_gen.yml

  build-ui:
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: ./Source
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget

    - name: modify version
      run: |
        echo ${{ github.event.inputs.version }} > Version.txt
    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 19
    - uses: pnpm/action-setup@v2.4.0
      with:
        version: 8.10.0
        run_install: false
    - name: install ts-node
      run: |
        pnpm i -g ts-node
        pnpm i -D @types/node
    - uses: actions/setup-java@v3
      with:
        distribution: 'temurin' # See 'Supported distributions' for available options
        java-version: '20'
    - name: Generate Code
      run: pnpm run GenerateCode
    - name: Build web
      run: pnpm run pack:web
    - name: upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: ./Source/ClientApp/dist
        if-no-files-found: error
  build-win64:
    runs-on: windows-latest
    environment: production
    needs: [build-ui]
    env: 
      TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
      TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 8.0.x
        include-prerelease: false
    - name: install Rust stable
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - name: cargo cache    
      uses: Swatinem/rust-cache@v2
      with:
        prefix-key: "Cargo"
        workspaces: |
          ./Source/ClientApp/src-tauri
          ./Source/Services/VitalRustService
    - name: modify version
      run: |
        cd "./Source"
        echo ${{ github.event.inputs.version }} > Version.txt
    - name: version bump
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add ./Source/Version.txt
        git commit -m "Update Version" -a
    - name: Cache pnpm modules
      uses: actions/cache@v3
      with:
        path: ~/.pnpm-store
        key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-
    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 19
    - uses: pnpm/action-setup@v2.4.0
      with:
        version: 8.10.0
        run_install: false
    - name: install ts-node
      run: |
        cd "./Source"
        pnpm i -g ts-node
        pnpm i -D @types/node
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: ./Source/ClientApp/dist
    - name: Build release
      run: |
        cd "./Source"
        pnpm run pack:dotnetservice -p windows-x86_64
        pnpm run pack:rustservice -p windows-x86_64
        pnpm run build:release -p windows-x86_64 -s
        
    - name: upload artifact
      uses: actions/upload-artifact@v3
      with:
        path: ./Source/ClientApp/src-tauri/target/release/bundle
        if-no-files-found: error

  build-macos64:
    strategy: 
      matrix: 
        platform: [x86_64-apple-darwin]
    runs-on: macos-latest
    environment: production
    needs: [build-ui]
    env: 
      TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
      TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 8.0.x
        include-prerelease: false
    - name: install Rust stable
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - name: cargo cache    
      uses: Swatinem/rust-cache@v2
      with:
        prefix-key: "Cargo"
        workspaces: |
          ./Source/ClientApp/src-tauri
          ./Source/Services/VitalRustService
    - name: modify version
      run: |
        cd "./Source"
        echo ${{ github.event.inputs.version }} > Version.txt
    - name: version bump
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add ./Source/Version.txt
        git commit -m "Update Version" -a
    - name: Cache pnpm modules
      uses: actions/cache@v3
      with:
        path: ~/.pnpm-store
        key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-
    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 19
    - uses: pnpm/action-setup@v2.4.0
      with:
        version: 8.10.0
        run_install: false
    - name: install ts-node
      run: |
        cd "./Source"
        pnpm i -g ts-node
        pnpm i -D @types/node
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: ./Source/ClientApp/dist
    - name: Build release
      run: |
        cd "./Source"
        pnpm run pack:dotnetservice -p ${{matrix.platform}}
        pnpm run pack:rustservice -p ${{matrix.platform}}
        pnpm run build:release -p ${{matrix.platform}} -s
    - name: upload artifact
      uses: actions/upload-artifact@v3
      with:
        path: ./Source/ClientApp/src-tauri/target/release/bundle
        if-no-files-found: error
  build-macosarm:
    strategy: 
      matrix: 
        platform: [aarch64-apple-darwin]
    runs-on: macos-13
    defaults:
      run:
        working-directory: ./Source
    environment: production
    needs: [build-ui]
    env: 
      TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
      TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 8.0.x
        include-prerelease: false
    - name: install Rust stable
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - name: cargo cache    
      uses: Swatinem/rust-cache@v2
      with:
        prefix-key: "Cargo"
        workspaces: |
          ./ClientApp/src-tauri
          ./Services/VitalRustService
    - name: modify version
      run: |
        echo ${{ github.event.inputs.version }} > Version.txt
    - name: version bump
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add ./Version.txt
        git commit -m "Update Version" -a
    - name: Cache pnpm modules
      uses: actions/cache@v3
      with:
        path: ~/.pnpm-store
        key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-
    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 19
    - uses: pnpm/action-setup@v2.4.0
      with:
        version: 8.10.0
        run_install: false
    - name: install ts-node
      run: |
        pnpm i -g ts-node
        pnpm i -D @types/node
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: ./ClientApp/dist
    - name: Pack Dotnet
      run: pnpm run pack:dotnetservice -p ${{matrix.platform}}
    - name: Pack RustService
      run: pnpm run pack:rustservice -p ${{matrix.platform}}
    - name: Build release
      run: pnpm run build:release -p ${{matrix.platform}} -s
    - name: upload artifact
      uses: actions/upload-artifact@v3
      with:
        path: ./ClientApp/src-tauri/target/release/bundle
        if-no-files-found: error
  release:
    runs-on: ubuntu-latest
    environment: production
    needs: [build-win64, build-macos64, build-macosarm]
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./Source/ClientApp/src-tauri/target/release/bundle
        if-no-files-found: error
    - name: Release
      uses: softprops/action-gh-release@v1
      with: 
        draft: true
        generate_release_notes: true
        fail_on_unmatched_files: true
        tag_name: ${{ github.event.inputs.version }}
        token: ${{ secrets.GITHUB_TOKEN }}
        files: |
          ./Source/ClientApp/src-tauri/target/release/bundle/msi/*.msi
          ./Source/ClientApp/src-tauri/target/release/bundle/msi/*.msi.zip
          ./Source/ClientApp/src-tauri/target/release/bundle/msi/*.msi.zip.sig
          ./Source/ClientApp/src-tauri/target/release/bundle/app/*.app
          ./Source/ClientApp/src-tauri/target/release/bundle/app/*.app.zip
          ./Source/ClientApp/src-tauri/target/release/bundle/app/*.app.zip.sig
